<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JunZhe&#39;s Blog</title>
  
  <subtitle>志存高远，追求卓越</subtitle>
  <link href="https://dreamkongcheng.github.io/atom.xml" rel="self"/>
  
  <link href="https://dreamkongcheng.github.io/"/>
  <updated>2024-10-10T09:58:35.996Z</updated>
  <id>https://dreamkongcheng.github.io/</id>
  
  <author>
    <name>JunZhe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>让Google搜到你的Github-Hexo个人博客</title>
    <link href="https://dreamkongcheng.github.io/blogs/personal-blog-setup/%E8%AE%A9Google%E6%90%9C%E5%88%B0%E4%BD%A0%E7%9A%84Github-Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://dreamkongcheng.github.io/blogs/personal-blog-setup/%E8%AE%A9Google%E6%90%9C%E5%88%B0%E4%BD%A0%E7%9A%84Github-Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2024-10-10T09:58:30.000Z</published>
    <updated>2024-10-10T09:58:35.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间自己折腾了一下博客，初步建立起了自己的小站，今天心血来潮在谷歌搜索自己之前写的<a href="https://dreamkongcheng.github.io/blogs/personal-blog-setup/Github%20Pages%20+%20Hexo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/">从零搭建个人博客</a>的文章，结果在 Google 上面翻了十页都没有翻到，我一开始还以为是因为发了没多久的缘故，后来一查才知道 GitHub Pages 屏蔽了Google 的爬虫，所以在 Google 里是搜索不到 GitHub Pages 上面的网页的。</p><p>这怎么行？！</p><p>对于我来说，我写博客主要是为了将自己学习的知识进行一个输出，虽然不是什么高大上的东西，但是我相信一定有和我一样刚刚在计算机领域起步，并且热爱探索、折腾工具的朋友，我的这些经验和感悟或许就能给大家带来一点小小的启发。另外，因为是要写给别人看，所以要更加注重自己语言的逻辑组织。并且要把一件事能够完全的和别人讲清楚，还需要自己更高层次的理解，这反过来也倒逼了我自己去进行更深度的思考，让我更好的理解掌握知识。</p><p>话说回来，我不是写只给自己看的日记的，那些我都存放在本地的 obsidian 里面。之后或许有机会写一些我折腾 obsidian 的记录（<del>逃</del>），我希望我的博客能在网络的海洋里有幸被人看到。</p><span id="more"></span><h2 id="验证自己的博客能否被搜索到"><a href="#验证自己的博客能否被搜索到" class="headerlink" title="验证自己的博客能否被搜索到"></a>验证自己的博客能否被搜索到</h2><p>打开Google，输入<code>site:https://&lt;username&gt;.github.io/</code></p><p>如果没被索引到，在搜索结果页面就会直接提示你使用<a href="https://search.google.com/search-console?hl=zh-CN">Google Search Console</a>。</p><h2 id="Google搜索提交"><a href="#Google搜索提交" class="headerlink" title="Google搜索提交"></a>Google搜索提交</h2><img src="../../../_drafts/assets/让Google搜到你的Github-Hexo个人博客/image-20241010173013824.png" alt="image-20241010173013824" style="zoom:33%;" /><p>在“网址前缀”里输入你的博客网址<code>https://&lt;username&gt;.github.io&gt;</code>，然后建议选择HTML文件验证。具体方法为：</p><p>下载文件，然后把这个文件<strong>添加到你的Github博客根目录中</strong>，我用的是Hexo博客，以此举例。</p><p>将刚刚的文件放入你的source文件夹，然后执行<code>hexo g</code>将其添加到public文件夹中，public文件夹就是你博客的内容。</p><p>⚠️：你得在<strong>站点配置文件</strong>_config.yml设置不渲染.html文件，否则会出错，具体操作请见我的另一篇文章<a href="https://dreamkongcheng.github.io/blogs/personal-blog-setup/Hexo%E5%A6%82%E4%BD%95%E4%B8%8D%E6%B8%B2%E6%9F%93-md%E4%B8%8E-html%E6%96%87%E4%BB%B6/">Hexo如何不渲染.md与.html文件</a>.</p><p>在_config.yml里的<code>skip_render: </code>字段下设置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">&#x27;README.md&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&#x27;*.html&#x27;</span></span><br></pre></td></tr></table></figure><p>然后 <code>hexo g </code>&amp;&amp; <code>hexo d</code>，过一会点一下验证就行了</p><img src="../../../_drafts/assets/让Google搜到你的Github-Hexo个人博客/image-20241010170527201.png" alt="image-20241010170527201" style="zoom: 25%;" /><p>点击前往资源页面，进行站点地图添加</p><h2 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h2><ol><li>首先在本地Hexo博客目录下安装扩展</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>这里索性把百度的也搞了</p><ol start="2"><li>打开站点配置文件_config.yml，添加</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line">sitemap:</span><br><span class="line">path: sitemap.xml</span><br></pre></td></tr></table></figure><p>然后<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>提交博客。这时能够找到public\sitemap.xml文件。</p><ol start="3"><li>在资源页面添加站点地图</li></ol><p><img src="/../../../_drafts/assets/%E8%AE%A9Google%E6%90%9C%E5%88%B0%E4%BD%A0%E7%9A%84Github-Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20241010170844375.png" alt="image-20241010170844375"></p><p>我因为把sitemap放在博客根目录下，所以在这里直接输入sitemap即可</p><h2 id="添加robots-txt"><a href="#添加robots-txt" class="headerlink" title="添加robots.txt"></a>添加robots.txt</h2><blockquote><p>robots.txt（统一小写）是一种存放于网站根目录下的 ASCII 编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。</p></blockquote><p>在 <code>source</code> 目录下增加 <code>robots.txt</code> 文件， 我的文件具体内容如下可供参考，注意将域名改为自己的网站：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /about/</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /blogs/</span><br><span class="line">Allow: /categories/</span><br><span class="line">Allow: /tags/</span><br><span class="line"></span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /lib/</span><br><span class="line"></span><br><span class="line">Sitemap: https://www.DreamKongcheng.com/sitemap.xml</span><br><span class="line">Sitemap: https://www.DreamKongcheng.com/baidusitemap.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>提交博客之后，需要等待一段时间才能在Google上搜到，因为Google需要时间来处理我们的请求、抓取相应网页并将其编入索引。</p><hr><p>参考文章：</p><p><a href="https://blog.csdn.net/weixin_44058333/article/details/100165245">让Google搜索到GitHub上的个人博客</a></p><p><a href="https://www.xiemingzhao.com/posts/HexoblogSE.html">Hexo博客提交链接到搜索引擎来收录</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间自己折腾了一下博客，初步建立起了自己的小站，今天心血来潮在谷歌搜索自己之前写的&lt;a href=&quot;https://dreamkongcheng.github.io/blogs/personal-blog-setup/Github%20Pages%20+%20Hexo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/&quot;&gt;从零搭建个人博客&lt;/a&gt;的文章，结果在 Google 上面翻了十页都没有翻到，我一开始还以为是因为发了没多久的缘故，后来一查才知道 GitHub Pages 屏蔽了Google 的爬虫，所以在 Google 里是搜索不到 GitHub Pages 上面的网页的。&lt;/p&gt;
&lt;p&gt;这怎么行？！&lt;/p&gt;
&lt;p&gt;对于我来说，我写博客主要是为了将自己学习的知识进行一个输出，虽然不是什么高大上的东西，但是我相信一定有和我一样刚刚在计算机领域起步，并且热爱探索、折腾工具的朋友，我的这些经验和感悟或许就能给大家带来一点小小的启发。另外，因为是要写给别人看，所以要更加注重自己语言的逻辑组织。并且要把一件事能够完全的和别人讲清楚，还需要自己更高层次的理解，这反过来也倒逼了我自己去进行更深度的思考，让我更好的理解掌握知识。&lt;/p&gt;
&lt;p&gt;话说回来，我不是写只给自己看的日记的，那些我都存放在本地的 obsidian 里面。之后或许有机会写一些我折腾 obsidian 的记录（&lt;del&gt;逃&lt;/del&gt;），我希望我的博客能在网络的海洋里有幸被人看到。&lt;/p&gt;</summary>
    
    
    
    <category term="个人博客建设" scheme="https://dreamkongcheng.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="前端" scheme="https://dreamkongcheng.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="网站建设" scheme="https://dreamkongcheng.github.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="Hexo" scheme="https://dreamkongcheng.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo如何不渲染.md与.html文件</title>
    <link href="https://dreamkongcheng.github.io/blogs/personal-blog-setup/Hexo%E5%A6%82%E4%BD%95%E4%B8%8D%E6%B8%B2%E6%9F%93-md%E4%B8%8E-html%E6%96%87%E4%BB%B6/"/>
    <id>https://dreamkongcheng.github.io/blogs/personal-blog-setup/Hexo%E5%A6%82%E4%BD%95%E4%B8%8D%E6%B8%B2%E6%9F%93-md%E4%B8%8E-html%E6%96%87%E4%BB%B6/</id>
    <published>2024-10-10T08:58:37.000Z</published>
    <updated>2024-10-10T08:58:36.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，Hexo会自动将 source 文件夹下的所有 .md 与 .html 文件渲染。但有的时候，这会造成很大的问题。比如我写了个 README.md 文件，或者我想在根目录下添加一个 html 文件（比如谷歌用于验证网站的 html 文件），他们都会在 <code>hexo g</code> 时候被渲染。如果我们把这些文件直接放在 public 文件夹下，那么他们就不会被渲染，但是当我们执行了 <code>hexo clean</code> 之后，这些文件就会被删除。我们希望能够把这些文件放在我们的 source 文件夹下，每次 <code>hexo g</code> 的时候被<strong>拷贝</strong>到 public文件夹下而不被<strong>渲染</strong>。</p><span id="more"></span><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>找到<strong>站点配置文件</strong> <code>_config.yml</code>，在其中添加以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;README.md&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*.html&#x27;</span></span><br></pre></td></tr></table></figure><p>这样符合规则的文件就不会被渲染了，他们会原封不动地进入到 pubilc 文件夹，存放在博客的根目录。完美！</p><p>方法参考：<br><a href="https://blog.csdn.net/ganzhilin520/article/details/79057774">Hexo不渲染.md或者.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;众所周知，Hexo会自动将 source 文件夹下的所有 .md 与 .html 文件渲染。但有的时候，这会造成很大的问题。比如我写了个 README.md 文件，或者我想在根目录下添加一个 html 文件（比如谷歌用于验证网站的 html 文件），他们都会在 &lt;code&gt;hexo g&lt;/code&gt; 时候被渲染。如果我们把这些文件直接放在 public 文件夹下，那么他们就不会被渲染，但是当我们执行了 &lt;code&gt;hexo clean&lt;/code&gt; 之后，这些文件就会被删除。我们希望能够把这些文件放在我们的 source 文件夹下，每次 &lt;code&gt;hexo g&lt;/code&gt; 的时候被&lt;strong&gt;拷贝&lt;/strong&gt;到 public文件夹下而不被&lt;strong&gt;渲染&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="个人博客建设" scheme="https://dreamkongcheng.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="前端" scheme="https://dreamkongcheng.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="网站建设" scheme="https://dreamkongcheng.github.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="Hexo" scheme="https://dreamkongcheng.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo技巧之_posts文件夹管理</title>
    <link href="https://dreamkongcheng.github.io/blogs/personal-blog-setup/Hexo%E6%8A%80%E5%B7%A7%E4%B9%8B_posts%E6%96%87%E4%BB%B6%E5%A4%B9%E7%AE%A1%E7%90%86/"/>
    <id>https://dreamkongcheng.github.io/blogs/personal-blog-setup/Hexo%E6%8A%80%E5%B7%A7%E4%B9%8B_posts%E6%96%87%E4%BB%B6%E5%A4%B9%E7%AE%A1%E7%90%86/</id>
    <published>2024-09-28T12:04:37.000Z</published>
    <updated>2024-10-10T08:44:03.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在搭建起我的Hexo框架并且进行了一些的博客写作之后，我发现我习惯是有一点灵感就把他记录下来，然后想着后面有更多输入之后再来填这个坑。但是这样我就会有大量的文档堆在_posts文件夹下面，非常混乱。虽然Hexo也提供了_drafts文件夹来存放草稿，但是就算这样，等我想要发布的时候还是会有很多的文件在_posts文件夹下面。网上很多人都是用年&#x2F;月&#x2F;日来建立文件夹进行分类，但是这不能从根本上解决<strong>本地</strong>分类混乱的问题（线上的分类可以用文章的front-matter来解决）。所以我就想着能不能用文件夹来分类，就像我自己在obsidian里面搭建的个人知识体系一样，下面给出我的一些解决方法.</p><span id="more"></span><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><p>参考文章：<a href="https://mouson.im/Notes/Hexo/make-hexo-post-category-by-folder/">Hexo - 使文章依文章分类为资料夹名称置放</a></p><p>_config.yml文件中的设置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span></span><br></pre></td></tr></table></figure><p>⚠️说明：<br>permalink中的<code>:title</code>是相对于_posts文件夹的，而new_post_name中的<code>:title</code>是你在<code>hexo new</code>命令中输入的文件名（会稍稍处理一下，把空格什么的变成-号），然后在后面加上.md作为你在文件列表里看到的文件名。（<strong>不是文章的标题！</strong>）</p><p>所以我这样设置之后，我就按自己的需要再_posts文件夹下面建立分类文件夹，比如“个人博客搭建”来存放我所有关于博客搭建的文章，以及这篇文章。而在“计算机网络”文件夹下面存放所有关于计算机网络的笔记。在<code>hexo new &lt;title&gt;</code>的时候，文章一开始被放在_posts下面，然后你根据需要把他丢进具体的分类文件夹里，是不是很方便！然后在<code>hexo g</code>的时候，public文件夹里的目录就是和你的_posts文件夹一样的结构，看起来也很清爽。<br>另外，你还可以在front-matter里面加上categories来进行线上的分类，可以和本地统一也可以采用不同的分类方法。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><ol><li>和你在本地存放笔记那样，用文件类别作为区分，会比用日期区分更加清晰。</li><li>如你习惯以<code>hexo new draft</code>作草稿编辑，那在进行<code>hexo publish &#123;title&#125;</code>后，文章会进入_posts中，还需要手动再把它塞进你想让他去的文件夹。</li><li>如果你的文件夹是中文，那你文章最终的链接会存在一些url编码，看起来有些丑，不过你完全可以在本地使用英文文件夹，然后在front-matter里面加上中文的categories，这样就可以解决这个问题了。</li></ol><p>希望这篇文章对你有所帮助！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h2&gt;&lt;p&gt;在搭建起我的Hexo框架并且进行了一些的博客写作之后，我发现我习惯是有一点灵感就把他记录下来，然后想着后面有更多输入之后再来填这个坑。但是这样我就会有大量的文档堆在_posts文件夹下面，非常混乱。虽然Hexo也提供了_drafts文件夹来存放草稿，但是就算这样，等我想要发布的时候还是会有很多的文件在_posts文件夹下面。网上很多人都是用年&amp;#x2F;月&amp;#x2F;日来建立文件夹进行分类，但是这不能从根本上解决&lt;strong&gt;本地&lt;/strong&gt;分类混乱的问题（线上的分类可以用文章的front-matter来解决）。所以我就想着能不能用文件夹来分类，就像我自己在obsidian里面搭建的个人知识体系一样，下面给出我的一些解决方法.&lt;/p&gt;</summary>
    
    
    
    <category term="个人博客建设" scheme="https://dreamkongcheng.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="前端" scheme="https://dreamkongcheng.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="网站建设" scheme="https://dreamkongcheng.github.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="Hexo" scheme="https://dreamkongcheng.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages + Hexo从零搭建个人博客（二）：Git双分支管理网页与源文件</title>
    <link href="https://dreamkongcheng.github.io/blogs/personal-blog-setup/Github%20Pages%20+%20Hexo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://dreamkongcheng.github.io/blogs/personal-blog-setup/Github%20Pages%20+%20Hexo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2024-09-28T10:46:45.000Z</published>
    <updated>2024-10-10T08:44:07.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双分支管理"><a href="#双分支管理" class="headerlink" title="双分支管理"></a>双分支管理</h2><p>参考文章：<a href="https://blog.csdn.net/gatieme/article/details/82317704">使用 GitHub 分支保存 Hexo 环境和博文</a></p><h3 id="为什么要双分支管理？"><a href="#为什么要双分支管理？" class="headerlink" title="为什么要双分支管理？"></a>为什么要双分支管理？</h3><p><code>hexo d</code>命令实际上是用了hexo-deploy-git工具，将public中的内容加入到.deploy_git文件夹中，然后把这个文件夹的内容同步到远程仓库(YourgithubName.github.io)中你<a href="#%E5%85%B7%E4%BD%93%E6%93%8D%E4%BD%9C">前面设置</a>的分支中。我这里设置的是main。</p><p>注意！你的source文件夹等是不会到public里面去的，所以不会被同步！</p><p>那么问题来了。如果我需要在不同地方撰写我的博客，或者我需要使用github来进行备份，该怎么办呢？</p><p>这时候就需要我们用两个分支，第一个main分支保存public的html内容，也就是我们的网站，另一个source分支来保存我们的配置文件、md源文件等。</p><span id="more"></span><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><p>（如果完全安装我前面的步骤，你应该还没有进行<code>git init</code>，也没有同步远程仓库）</p><ol><li>初始化 Hexo 项目为 Git 仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Blogs  <span class="comment"># 返回到 Hexo 项目的根目录</span></span><br><span class="line">git init  <span class="comment"># 初始化 Git 仓库</span></span><br></pre></td></tr></table></figure><ol start="2"><li>切换到一个新的分支来保存源文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">source</span></span><br></pre></td></tr></table></figure><ol start="3"><li>将当前的 Hexo 源文件（如 <code>_config.yml</code>、<code>themes</code> 目录、<code>source</code> 目录等）提交到这个 <code>source</code> 分支：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit of Hexo source files&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>关联远程仓库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:&lt;YourName&gt;/&lt;YourName&gt;.github.io</span><br></pre></td></tr></table></figure><p>这一步需要你配置好ssh key，具体方法请自行google</p><p>通过<code>git remote -v</code>来检查是否关联成功，若成功，有如下消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">origin  git@github.com:&lt;YourName&gt;/&lt;YourName&gt;.github.io (fetch)</span><br><span class="line">origin  git@github.com:&lt;YourName&gt;/&lt;YourName&gt;.github.io (push)</span><br></pre></td></tr></table></figure><ol start="5"><li>推送</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>这样就成功把源文件保存到<code>&lt;YourName&gt;.github.io</code>仓库的source分支了</p><p>接下来，你已经能够对你的整个Hexo博客环境进行git版本控制了，接下来尽情Diy你的个人博客吧！:smiley:</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;双分支管理&quot;&gt;&lt;a href=&quot;#双分支管理&quot; class=&quot;headerlink&quot; title=&quot;双分支管理&quot;&gt;&lt;/a&gt;双分支管理&lt;/h2&gt;&lt;p&gt;参考文章：&lt;a href=&quot;https://blog.csdn.net/gatieme/article/details/82317704&quot;&gt;使用 GitHub 分支保存 Hexo 环境和博文&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;为什么要双分支管理？&quot;&gt;&lt;a href=&quot;#为什么要双分支管理？&quot; class=&quot;headerlink&quot; title=&quot;为什么要双分支管理？&quot;&gt;&lt;/a&gt;为什么要双分支管理？&lt;/h3&gt;&lt;p&gt;&lt;code&gt;hexo d&lt;/code&gt;命令实际上是用了hexo-deploy-git工具，将public中的内容加入到.deploy_git文件夹中，然后把这个文件夹的内容同步到远程仓库(YourgithubName.github.io)中你&lt;a href=&quot;#%E5%85%B7%E4%BD%93%E6%93%8D%E4%BD%9C&quot;&gt;前面设置&lt;/a&gt;的分支中。我这里设置的是main。&lt;/p&gt;
&lt;p&gt;注意！你的source文件夹等是不会到public里面去的，所以不会被同步！&lt;/p&gt;
&lt;p&gt;那么问题来了。如果我需要在不同地方撰写我的博客，或者我需要使用github来进行备份，该怎么办呢？&lt;/p&gt;
&lt;p&gt;这时候就需要我们用两个分支，第一个main分支保存public的html内容，也就是我们的网站，另一个source分支来保存我们的配置文件、md源文件等。&lt;/p&gt;</summary>
    
    
    
    <category term="个人博客建设" scheme="https://dreamkongcheng.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="前端" scheme="https://dreamkongcheng.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="网站建设" scheme="https://dreamkongcheng.github.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="Hexo" scheme="https://dreamkongcheng.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages + Hexo从零搭建个人博客（三）：Next主题美化</title>
    <link href="https://dreamkongcheng.github.io/blogs/personal-blog-setup/Github%20Pages%20+%20Hexo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://dreamkongcheng.github.io/blogs/personal-blog-setup/Github%20Pages%20+%20Hexo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2024-09-28T10:46:45.000Z</published>
    <updated>2024-10-10T10:10:59.827Z</updated>
    
    <content type="html"><![CDATA[<p>首先来讲一下<strong>站点配置文件</strong>和<strong>主题配置文件</strong></p><ul><li>站点配置文件<ul><li>位于博客根目录下的<code>_config.yml</code></li></ul></li><li>主题配置文件<ul><li>位于themes&#x2F;next中的<code>_config.yml</code></li></ul></li></ul><h2 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h2><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="更换内置主题"><a href="#更换内置主题" class="headerlink" title="更换内置主题"></a>更换内置主题</h3><p>在<code>Schemes</code>下可以看到这些主题，去掉想要的主题前面的 # 即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><p>这里我选择了Mist主题，我很喜欢他的顶部导航栏</p><p><img src="https://cdn.jsdelivr.net/gh/DreamKongcheng/image-repo/blogs/202409282248043.webp" alt="image-20240928212948404"></p><h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><ol><li>把你想要展示的东西都取消注释掉</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. yoursite.com/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure><p>这时候在本地预览里可以看到这些入口已经出现了，但是点进去会报错<code>Cannot GET /tags/</code></p><p>这是因为你还没有在_post里面新建<strong>页面（page）</strong>。</p><p>如果需要更改图标，可以进入<a href="https://sspai.com/link?target=https://fontawesome.dashgame.com/">Font Awesome</a>获取新图标，只需将||后的内容改为“fa + 复制的图标”即可</p><ol start="2"><li>进入终端，输入命令（以创建tags为例）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Blogs</span><br><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>完成以后在Blogs&#x2F;source目录中会出现tags文件夹，其中含有index.md文件，文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2024-09-28 10:56:39</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ol start="3"><li>接下来添加字段： <code>type: tags</code>（必须要添加，不然网页里是不会显示内容的）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2024-09-28 10:56:39</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/DreamKongcheng/image-repo/blogs/202409282248044.webp" alt="image-20240928214810057"></p><p>这样就对了</p><blockquote><p>其实这个的原理就是在hexo g的时候会在public文件夹下生成tags文件夹，里面是由刚刚的index.md生成的index.html，它包含了tags这个页面的全部内容</p></blockquote><p>其他的几个都同理</p><ol start="4"><li>（可选）为菜单栏的图标添加内容数量统计，效果如下：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/DreamKongcheng/image-repo/blogs/202409282248045.webp" alt="image-20240928215331479"></p><h3 id="设置侧边栏"><a href="#设置侧边栏" class="headerlink" title="设置侧边栏"></a>设置侧边栏</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Sidebar Settings</span></span><br><span class="line"><span class="comment"># See: https://theme-next.org/docs/theme-settings/sidebar</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  <span class="attr">width:</span> <span class="number">250</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sidebar padding in pixels.</span></span><br><span class="line">  <span class="attr">padding:</span> <span class="number">30</span></span><br><span class="line">  <span class="comment"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="attr">offset:</span> <span class="number">12</span></span><br><span class="line">  <span class="comment"># Enable sidebar on narrow view (only for Muse | Mist).</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><p>position：sidebar是在左边还是右边展示</p></li><li><p>width：sidebar的宽度</p></li><li><p>display：默认的显示模式，是默认为展开还是默认为关闭，看个人喜好吧，我默认关闭</p></li><li><p>padding：和顶部的距离，数字越大你的名字、头像这些东西和上面离得越开，默认的18太顶天了，我改成30了</p></li><li><p>onmobile：当你把网页侧边距变小（把窗口拉窄）时，sidebar会继续待着还是自动收起来，建议选择false，即会自动收起来，不然很丑</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/head.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>这一部分是设置头像的</li><li>url：头像的图片保存在themes&#x2F;next&#x2F;source&#x2F;images文件夹中</li><li>rounded：头像变成圆框，推荐</li><li>rotated：鼠标放上去会旋转，<del>有点沙雕</del></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Posts / Categories / Tags in sidebar.</span></span><br><span class="line"><span class="attr">site_state:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>是否展示这三个图标，方便你在sidebar里快速导航</li></ul><p><img src="https://cdn.jsdelivr.net/gh/DreamKongcheng/image-repo/blogs/202409282248046.webp" alt="image-20240928220954102"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:yzy20040303@gmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br></pre></td></tr></table></figure><ul><li>社交链接：自行设置即可，||后面依然是图标</li></ul><p>有点写不动了，感觉注释很详细，可以跟着注释去做</p><h3 id="设置右上角Github图标"><a href="#设置右上角Github图标" class="headerlink" title="设置右上角Github图标"></a>设置右上角Github图标</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/DreamKongcheng</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考文章：<br><a href="https://sspai.com/post/85116">Hexo+Github Page｜基础教程(二)：NexT 主题基本美化｜全网最细致全面的教程</a><br><a href="https://www.cylong.com/blog/2016/04/25/hexo-faq/">Hexo 使用总结 &amp; 常见问题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先来讲一下&lt;strong&gt;站点配置文件&lt;/strong&gt;和&lt;strong&gt;主题配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;站点配置文件&lt;ul&gt;
&lt;li&gt;位于博客根目录下的&lt;code&gt;_config.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="个人博客建设" scheme="https://dreamkongcheng.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="前端" scheme="https://dreamkongcheng.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="网站建设" scheme="https://dreamkongcheng.github.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="Hexo" scheme="https://dreamkongcheng.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github Pages + Hexo从零搭建个人博客（一）：基础建设</title>
    <link href="https://dreamkongcheng.github.io/blogs/personal-blog-setup/Github%20Pages%20+%20Hexo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://dreamkongcheng.github.io/blogs/personal-blog-setup/Github%20Pages%20+%20Hexo%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-09-27T13:17:27.000Z</published>
    <updated>2024-10-10T08:44:24.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今年我刚刚步入大三，已经进行了两年的计算机科学与技术专业的学习。这两年感觉有些摸鱼，学了一些知识，但是好像也就是为了应付考试，在考试结束以后这些知识慢慢的被遗忘了，这是我不愿意看到的。感觉如果想把自己所学的东西更好的消化吸收，光靠学是不够的，更重要的是把自己学的东西进行分享。只有当你能把一个知识点逻辑清晰的用自己的话讲述给别人时，才能说明自己真的是掌握了这个知识点。</p><p>我也见过学校里一些学长学姐的个人网站，他们分享自己的课程笔记，<del>为我的期末补天提供了宝贵的资源</del>。我自己也是一个比较喜欢折腾的人，感觉在这些地方折腾就像是精心布置自己的房间一样，会让自己非常的有归属感与成就感。于是，我也看了网上不少的教程，希望能够从零开始一步步搭建属于我自己的个人网站。</p><p>第一篇博客就来讲一下我是怎么搭建个人网站的吧！</p><span id="more"></span><h2 id="概念简介——Github-Pages、Hexo都是什么？"><a href="#概念简介——Github-Pages、Hexo都是什么？" class="headerlink" title="概念简介——Github Pages、Hexo都是什么？"></a>概念简介——Github Pages、Hexo都是什么？</h2><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p>来看一下<a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/about-github-pages">官方文档</a>的解释</p><blockquote><p>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。 </p><p>你可以在 GitHub 的 <code>github.io</code> 域或自己的自定义域上托管站点。</p></blockquote><p>总结一下，就是：</p><ul><li><p>Github Pages 是 Github 提供的<strong>网页寄存服务</strong>，用于存放<strong>静态网页</strong>，也就是我们的博客。</p></li><li><p>我们可以通过博客框架（e.g.Hexo）来把md文档转换为静态网页</p></li><li><p>最终可以通过自己的<code>github.io</code><strong>子域名</strong>来访问到生成的静态网页</p></li></ul><blockquote><p>静态网页是指内容固定、没有动态交互的网页，通常由HTML、CSS和JavaScript构成。每次用户请求时，服务器直接返回存储在硬盘上的文件，不会根据用户的输入或行为进行变化。</p></blockquote><p>而且重点是<strong>不花钱，不花钱，不花钱</strong>！！！</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p><a href="https://hexo.io/zh-cn/">Hexo官网地址</a></p><p><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></p><ul><li><p>Hexo 是一个快速、简洁且高效的<strong>静态博客框架</strong>。 </p></li><li><p>Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></li><li><p>我们写博客的工作流就是，在本地使用Markdown编辑器写博客，然后使用本地的Hexo框架进行解析，然后一键上传</p></li><li><p>Hexo包含丰富的<strong>主题</strong>，你可以选择一款自己喜欢的主题来美化自己的博客，我选择的是<a href="https://github.com/theme-next/hexo-theme-next">Next主题</a></p></li></ul><h2 id="从零开始搭建"><a href="#从零开始搭建" class="headerlink" title="从零开始搭建"></a>从零开始搭建</h2><p>默认你已经注册了Github账号并且安装了Git工具和Vscode代码编辑器</p><h3 id="Step1：Github-Pages配置"><a href="#Step1：Github-Pages配置" class="headerlink" title="Step1：Github Pages配置"></a>Step1：Github Pages配置</h3><p>新建仓库， 名称为<code>&lt;username&gt;.github.io</code> ，并保持仓库为<strong>public</strong></p><p><img src="https://cdn.jsdelivr.net/gh/DreamKongcheng/image-repo/blogs/202409272251954.webp"></p><h3 id="Step2：安装Hexo（Mac环境）"><a href="#Step2：安装Hexo（Mac环境）" class="headerlink" title="Step2：安装Hexo（Mac环境）"></a>Step2：安装Hexo（Mac环境）</h3><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><p>在Mac中，我们可以使用<a href="https://brew.sh/zh-cn/">Homebrew</a>进行这两者的安装。Homebrew是Mac的一款包管理工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br><span class="line">brew install node</span><br></pre></td></tr></table></figure><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>在电脑上创建一个文件夹用来存放自己的博客，我在文稿中新建了一个Blogs文件夹，在vscode中打开Blogs文件夹，新建一个终端，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Blogs</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/DreamKongcheng/image-repo/blogs/202409272251955.webp"></p><p>已经成功初始化</p><p>其实这一步首先是克隆了一个Github仓库，然后执行了<code>npm install</code>命令来安装package.json中的依赖包，依赖安装完成后就会多出node_modules与package-lock.json两个文件夹。</p><p>简单介绍下hexo的文件结构：</p><ul><li>node_modules ：插件以及hexo所需node.js模块</li><li>_config.yml 站点配置文件，设定一些公开信息等</li><li>package.json 应用程序信息，配置hexo运行所需js包</li><li>scaffolds 模板文件夹，新建文章，会默认包含对应模板内容</li><li>themes 存放主题文件，hexo根据主题生成静态网页</li><li>source 用于存放用户资源</li></ul><p>我们的日常写作都是在source&#x2F;_posts文件夹下</p><h4 id="启动Hexo服务"><a href="#启动Hexo服务" class="headerlink" title="启动Hexo服务"></a>启动Hexo服务</h4><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s  //或者hexo server</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/DreamKongcheng/image-repo/blogs/202409272251956.webp"></p><p>点击链接 <a href="http://localhost:4000/">http://localhost:4000</a>（图中黄色下划线位置）进行本地预览，默认是hexo内置的landscape 主题</p><p><img src="https://cdn.jsdelivr.net/gh/DreamKongcheng/image-repo/blogs/202409272251957.webp"></p><h3 id="Step3：配置Hexo的主题"><a href="#Step3：配置Hexo的主题" class="headerlink" title="Step3：配置Hexo的主题"></a>Step3：配置Hexo的主题</h3><p>我选择的是<a href="https://github.com/theme-next/hexo-theme-next">Next主题</a></p><p>在Blogs这个主目录中，将Next主题从Github上克隆到themes文件夹中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>可以看到themes文件夹下面多了存放Next主题的文件</p><p><img src="https://cdn.jsdelivr.net/gh/DreamKongcheng/image-repo/blogs/202409272251958.webp"></p><p>接下来，我们进入到_config.yml中修改主题配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span></span><br></pre></td></tr></table></figure><p>将其修改为Next，然后启动hexo服务</p><p><img src="https://cdn.jsdelivr.net/gh/DreamKongcheng/image-repo/blogs/202409272251959.webp"></p><p>我们已经成功使用了Next主题，是不是非常的方便快捷？</p><h3 id="Step4：开始我们的第一篇博客文章写作！"><a href="#Step4：开始我们的第一篇博客文章写作！" class="headerlink" title="Step4：开始我们的第一篇博客文章写作！"></a>Step4：开始我们的第一篇博客文章写作！</h3><p>具体内容请参考<a href="https://hexo.io/zh-cn/docs/writing">Hexo官方文档</a>和<a href="https://fuguigui.github.io/hexo2/">一个Hexo文章写作流程示例</a>，下面我就简单讲一点比较常用的操作</p><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p><code>post</code>是默认的<code>布局</code>，但你也可以提供自己的布局。 您可以通过编辑 <code>_config.yml</code> 中的 <code>default_layout</code> 设置来更改默认布局。</p><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。 Files created by each of them is saved to a different path. Newly created posts are saved to the <code>source/_posts</code> folder.</p><table><thead><tr><th>布局</th><th align="left">路径</th></tr></thead><tbody><tr><td><code>post</code></td><td align="left"><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td align="left"><code>source</code></td></tr><tr><td><code>draft</code></td><td align="left"><code>source/_drafts</code></td></tr></tbody></table><p>一般来说，我们就直接执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;Github Pages + Hexo从零搭建个人博客&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/DreamKongcheng/image-repo/blogs/202409272251960.webp"></p><p>可以看到我们已经成功创建了一篇新的文章（文件名会把一些非法符号替换为-）</p><p>我们就按照正常的Markdown写作流程进行写作就行了</p><h3 id="Step5：将生成的静态页面部署到-github-上"><a href="#Step5：将生成的静态页面部署到-github-上" class="headerlink" title="Step5：将生成的静态页面部署到 github 上"></a>Step5：将生成的静态页面部署到 github 上</h3><p>具体内容请参考<a href="https://hexo.io/zh-cn/docs/writing">Hexo官方文档</a>和<a href="https://fuguigui.github.io/hexo2/">一次Hexo文章写作流程示例</a></p><ul><li>通过上面4步的操作，我们已经可以在本地通过 <code>localhost:4000</code> 查看博客页面了。</li><li>因此，这里我们要将 Hexo 框架生成的内容部署到 github 上，让其他家人也能看到 。</li></ul><h4 id="常用命令介绍"><a href="#常用命令介绍" class="headerlink" title="常用命令介绍"></a>常用命令介绍</h4><p>先列举一些常用的命令</p><ul><li><p>Clean: <code>hexo clean</code>。该命令会删除整个<code>***.github.io/public/</code>文件夹</p></li><li><p>Generate: <code>hexo generate</code>或者简写为<code>hexo g</code>。该命令会生成静态文件夹<code>public/</code>，也就是从markdown到网页文件html等的转换操作</p></li><li><p>Server: 启动服务器常用的是<code>hexo server</code>或者简写为<code>hexo s</code>。</p><p>该命令会把生成好的静态文件部署到本地的指定端口，之后即可在本地浏览器输入<code>localhost:4000</code>即可预览。</p></li><li><p>deploy：<code>hexo deploy</code>或者简写为<code>hexo d</code>。该命令将网站部署到服务器上。实际操作是：更新你在github上的仓库<code>***.github.io</code>的指定分支（如果你采用Hexo系列第一节说到的两分支方式的话）。这是你最终发表的博客页面，你可以在浏览器上访问<code>https://***.github.io</code>来查看更新后的博客啦。</p></li></ul><p>接着，给出一些命令使用的常见套路</p><ul><li><code>hexo clean</code>这个命令其实很少用。使用情况常见于：更新了<code>_config.yml</code>文件夹，删除了一些已有博文等。原因就是速度慢，耗费不必要的时间。毕竟它会将整个<code>public/</code>文件夹删除，再重新生成。推荐偶尔清理使用即可。</li><li><strong>通常更新一次博客的套路是先本地预览，再远程部署</strong>。即先执行<code>hexo g; hexo s</code>，再执行<code>hexo d</code>或者<code>hexo g; hexo d</code></li><li>hexo有个特别便利的地方！<ul><li>在本地预览时，你仍可以更改markdown文件中一般的文字内容，然后直接在浏览器端刷新页面，就能看到实时更改的效果，而不需要再执行一次<code>hexo g;hexo s</code>，节省很多时间。常用于预览过程中进行微调操作。</li></ul></li></ul><h4 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h4><p>修改站点配置文件<code>_config.yml</code>的最后部分</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>在执行之前，记得安装自动部署 (–save 加不加的区别在于是否写入到依赖文件package.json中)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment">#清除之前生成的东西</span></span><br><span class="line">hexo generate  <span class="comment">#生成静态文章，缩写hexo g</span></span><br><span class="line">hexo deploy  <span class="comment">#部署文章，缩写hexo d</span></span><br></pre></td></tr></table></figure><p>过一会儿就可以在<code>http://yourname.github.io</code>这个网站看到你的博客了！</p><p>（ps：其实部署就是把public内的所有内容推送到仓库中。.gitignore中的内容是给版本控制用的）</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今年我刚刚步入大三，已经进行了两年的计算机科学与技术专业的学习。这两年感觉有些摸鱼，学了一些知识，但是好像也就是为了应付考试，在考试结束以后这些知识慢慢的被遗忘了，这是我不愿意看到的。感觉如果想把自己所学的东西更好的消化吸收，光靠学是不够的，更重要的是把自己学的东西进行分享。只有当你能把一个知识点逻辑清晰的用自己的话讲述给别人时，才能说明自己真的是掌握了这个知识点。&lt;/p&gt;
&lt;p&gt;我也见过学校里一些学长学姐的个人网站，他们分享自己的课程笔记，&lt;del&gt;为我的期末补天提供了宝贵的资源&lt;/del&gt;。我自己也是一个比较喜欢折腾的人，感觉在这些地方折腾就像是精心布置自己的房间一样，会让自己非常的有归属感与成就感。于是，我也看了网上不少的教程，希望能够从零开始一步步搭建属于我自己的个人网站。&lt;/p&gt;
&lt;p&gt;第一篇博客就来讲一下我是怎么搭建个人网站的吧！&lt;/p&gt;</summary>
    
    
    
    <category term="个人博客建设" scheme="https://dreamkongcheng.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE/"/>
    
    
    <category term="前端" scheme="https://dreamkongcheng.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="网站建设" scheme="https://dreamkongcheng.github.io/tags/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="Hexo" scheme="https://dreamkongcheng.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
